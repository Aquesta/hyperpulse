import streamlit as st
from streamlit_autorefresh import st_autorefresh
import plotly.graph_objects as go
import threading
from core.websocket_client import start_websocket
from core.data_processor import process_trade_data
import pandas as pd
import pyperclip

def show_dashboard():
    st.set_page_config(page_title="HyperPulse", layout="wide")
    st.title("HyperPulse: –ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –Ω–∞ HyperLiquid")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    st_autorefresh(interval=2000, key="auto_refresh")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if 'connection_status' not in st.session_state:
        st.session_state.connection_status = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è..."
    if 'websocket_thread' not in st.session_state:
        st.session_state.websocket_thread = None

    # –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        coin = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", ["BTC", "ETH", "SOL"], key="coin")
    with col2:
        time_interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª (–º–∏–Ω)", [1, 2, 3, 5], key="interval")

    st.write(f"–°—Ç–∞—Ç—É—Å: {st.session_state.connection_status}")

    # –ó–∞–ø—É—Å–∫ WebSocket-–ø–æ—Ç–æ–∫–∞
    if st.session_state.websocket_thread is None or not st.session_state.websocket_thread.is_alive():
        try:
            st.session_state.websocket_thread = threading.Thread(
                target=start_websocket,
                args=(coin,),
                daemon=True
            )
            st.session_state.websocket_thread.start()
            st.session_state.connection_status = "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ"
        except Exception as e:
            st.session_state.connection_status = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≤–µ–±—Å–æ–∫–µ—Ç—É: {e}")

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    df, volume_by_time, sentiment = process_trade_data(time_interval, coin)

    if df is not None and not df.empty and volume_by_time is not None and sentiment is not None:
        buy_volume = volume_by_time['B'] if 'B' in volume_by_time else []
        sell_volume = volume_by_time['A'] if 'A' in volume_by_time else []
        delta_volume = buy_volume - sell_volume

        # –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        st.metric("–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞", f"{sentiment:.1f}%", delta=f"{sentiment - 50:.1f}%")
        st.write(f"–û–±—ä–µ–º –ø–æ–∫—É–ø–æ–∫: ${df[df['side'] == 'B']['total'].sum():,.2f}")
        st.write(f"–û–±—ä–µ–º –ø—Ä–æ–¥–∞–∂: ${df[df['side'] == 'A']['total'].sum():,.2f}")
        st.write(f"–û–±—ä–µ–º –¥–∞–Ω–Ω—ã—Ö: {len(df)} –∑–∞–ø–∏—Å–µ–π")

        # üìë Tabs: –ì—Ä–∞—Ñ–∏–∫–∏ –∏ –¢–∞–±–ª–∏—Ü–∞
        tab1, tab2 = st.tabs(["üìà –ì—Ä–∞—Ñ–∏–∫–∏", "üìã –¢–∞–±–ª–∏—Ü–∞ –∫–æ—à–µ–ª—å–∫–æ–≤"])

        with tab1:
            # üìä –î–µ–ª—å—Ç–∞ –æ–±—ä–µ–º–∞
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=volume_by_time.index,
                y=delta_volume,
                mode='lines',
                name='–ü–æ–∫—É–ø–∫–∏',
                line=dict(color='yellowgreen')
            ))
            fig.update_layout(title="–î–µ–ª—å—Ç–∞ –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–æ–∫ –≤ USD", xaxis_title="–í—Ä–µ–º—è", yaxis_title="–î–µ–ª—å—Ç–∞ (USD)")
            st.plotly_chart(fig, use_container_width=True)

            # üìä –ö–æ–ª-–≤–æ —Å–¥–µ–ª–æ–∫
            count_by_time = df.groupby(['time_bin', 'side']).size().unstack().fillna(0)

            fig_count = go.Figure()
            fig_count.add_trace(go.Scatter(
                x=count_by_time.index,
                y=count_by_time.get('B', []),
                mode='lines',
                name='–ü–æ–∫—É–ø–∫–∏ (–∫–æ–ª-–≤–æ)',
                line=dict(color='yellowgreen')
            ))
            fig_count.add_trace(go.Scatter(
                x=count_by_time.index,
                y=count_by_time.get('A', []),
                mode='lines',
                name='–ü—Ä–æ–¥–∞–∂–∏ (–∫–æ–ª-–≤–æ)',
                line=dict(color='lightblue')
            ))
            fig_count.update_layout(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫", xaxis_title="–í—Ä–µ–º—è", yaxis_title="–°–¥–µ–ª–∫–∏ (—à—Ç)")
            st.plotly_chart(fig_count, use_container_width=True)

        with tab2:
            st.subheader("üìã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∏ –∞–≥—Ä–µ–≥–∞—Ü–∏—è
            buyers = df[df['side'] == 'B'].groupby('buyer').agg(
                buy_count=('buyer', 'count'),
                buy_volume=('total', 'sum')
            ).reset_index().rename(columns={'buyer': 'user'})

            sellers = df[df['side'] == 'A'].groupby('seller').agg(
                sell_count=('seller', 'count'),
                sell_volume=('total', 'sum')
            ).reset_index().rename(columns={'seller': 'user'})

            user_stats = pd.merge(buyers, sellers, on='user', how='outer').fillna(0)
            user_stats[['buy_count', 'sell_count']] = user_stats[['buy_count', 'sell_count']].astype(int)
            user_stats['buy_volume'] = user_stats['buy_volume'].apply(lambda x: f"${x:,.0f}")
            user_stats['sell_volume'] = user_stats['sell_volume'].apply(lambda x: f"${x:,.0f}")

            # –î–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é —Å float –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
            user_stats_sorted = user_stats.copy()
            user_stats_sorted['buy_volume_raw'] = user_stats_sorted['buy_volume'].replace('[\\$,]', '', regex=True).astype(float)
            user_stats_sorted['sell_volume_raw'] = user_stats_sorted['sell_volume'].replace('[\\$,]', '', regex=True).astype(float)

            user_stats_sorted = user_stats_sorted.sort_values(
                by=['buy_count', 'sell_count', 'buy_volume_raw', 'sell_volume_raw'],
                ascending=[False, False, False, False]
            )

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã
            header_col1, header_col2, header_col3, header_col4, header_col5, header_col6, header_col7 = st.columns([2, 2, 2, 2, 2, 1, 1])
            header_col1.text("Wallet")
            header_col2.text("Buy Count")
            header_col3.text("Buy Total")
            header_col4.text("Sell Count")
            header_col5.text("Sell Total")
            header_col6.text("Copy wallet")  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å"
            header_col7.text("Go to HypurrScan")  # –î–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–π—Ç–∏"

            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞
            for index, row in user_stats_sorted.iterrows():
                col1, col2, col3, col4, col5, col6, col7 = st.columns([2, 2, 2, 2, 2, 1, 1])
                col1.text(row['user'])
                col2.text(row['buy_count'])
                col3.text(row['buy_volume'])
                col4.text(row['sell_count'])
                col5.text(row['sell_volume'])
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                if col6.button("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", key=f"copy_{index}"):
                    pyperclip.copy(row['user'])
                    st.success(f"–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: {row['user']}")
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞
                address_url = f"https://hypurrscan.io/address/{row['user']}"
                col7.markdown(f"[–ü–µ—Ä–µ–π—Ç–∏]({address_url})", unsafe_allow_html=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
